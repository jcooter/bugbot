import time, threading, pika
import json
import socket

crontable = []
outputs = []
parent = None

class Threaded_worker(threading.Thread):
    def __init__(self, callback):
        threading.Thread.__init__(self)
        self.daemon = True
        self.callback = callback
        self.exchange = 'magfest.techops.notifications'
        self.exchange_type = 'fanout'


    def connect(self):
        print ' [AMQP] Connecting to RabbitMQ'
        self.connection = pika.SelectConnection(pika.ConnectionParameters('localhost'), self.on_connection_open, stop_ioloop_on_close=False)

    def on_connection_closed(self, connection, reply_code, reply_text):
        self.channel = None
        if self.closing:
            self.connection.ioloop.stop()
        else:
            print ' [AMQP] Connection closed, reconnecting: ({}) {}'.format(reply_code, reply_text)
            self.reconnect()

    def on_connection_open(self, unused_connection):
        print ' [AMQP] Connection established'
        self.connection.add_on_close_callback(self.on_connection_closed)
        self.open_channel()

    def reconnect(self):
        self.connection.ioloop.stop()

        if not self.closing:
            self.connect()
            self.connection.ioloop.start()

    def on_channel_closed(self, channel, reply_code, reply_text):
        print ' [AMQP] Channel {} was closed: {} {}'.format(channel, reply_code, reply_text)
        self.connection.close()

    def on_channel_open(self, channel):
        print ' [AMQP] Channel opened'
        self.channel = channel
        self.channel.add_on_close_callback(self.on_channel_closed)
        self.setup_exchange(self.exchange)

    def setup_exchange(self, exchange_name):
        print ' [AMQP] Declaring exchange {}'.format(exchange_name)
        self.channel.exchange_declare(self.on_exchange_declareok, exchange_name, self.exchange_type)

    def on_exchange_declareok(self, unused_frame):
        print ' [AMQP] Exchange declared successfully'
        self.setup_queue(socket.gethostname() + '.bugbot')
    def setup_queue(self, queue_name):
        print ' [AMQP] Declaring queue {}'.format(queue_name)
        self.channel.queue_declare(self.on_queue_declareok, queue_name)

    def on_queue_declareok(self, method_frame):
    
    def run(self):
        print ' [AMQP] Start Consuming'
        self.connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
        self.channel = self.connection.channel()
        for queue in self.queues:
            self.channel.queue_declare(queue=queue)
        self.channel.basic_qos(prefetch_count=1)
        for queue in self.queues:
            self.channel.basic_consume(self.callback, queue=queue, no_ack=1)
        self.channel.start_consuming()

def process_amqp_message(ch, method, properties, body):
    print " [AMQP] Received %r" % (body,)
    globals()[method.routing_key](body)
    ch.basic_ack(delivery_tag=method.delivery_tag)

def bugbot_sendtext(message):
    outputs.append([ 'C04TMV1LM', message ])

def bugbot_sendjson(json):
    message = json.loads(json)
    print message
    channel = message['channel']
    text = message['text']
    
    outputs.append([ channel_id[channel], text ])

def setup():
    print "AMQP Event Handler Plugin loaded!"
    reply = parent.slack_client.api_call('channels.list')
    channel_data = json.loads(reply)
    channel = None
    if channel_data['ok']:
        channels = channel_data['channels']
    channel_id = {}
    channel_name = {}
    for channel in channels:
        channel_id[channel['name']] = channel['id']
        channel_name[channel['id']] = channel['name']
    print channel_id

    amqp_worker = Threaded_worker(callback=process_amqp_message)
    amqp_worker.start()
